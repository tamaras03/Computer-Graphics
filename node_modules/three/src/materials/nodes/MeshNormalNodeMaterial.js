import NodeMaterial from './NodeMaterial.js';
import { diffuseColor } from '../../nodes/core/PropertyNode.js';
import { directionToColor } from '../../nodes/utils/Packing.js';
import { materialOpacity } from '../../nodes/accessors/MaterialNode.js';
<<<<<<< HEAD
import { transformedNormalView } from '../../nodes/accessors/Normal.js';
import { float, vec4 } from '../../nodes/tsl/TSLBase.js';
=======
import { normalView } from '../../nodes/accessors/Normal.js';
import { colorSpaceToWorking } from '../../nodes/display/ColorSpaceNode.js';
import { float, vec4 } from '../../nodes/tsl/TSLBase.js';
import { SRGBColorSpace } from '../../constants.js';
>>>>>>> 50c6784a0819c7177d83555e6a1624cb4553e499

import { MeshNormalMaterial } from '../MeshNormalMaterial.js';

const _defaultValues = /*@__PURE__*/ new MeshNormalMaterial();

<<<<<<< HEAD
=======
/**
 * Node material version of {@link MeshNormalMaterial}.
 *
 * @augments NodeMaterial
 */
>>>>>>> 50c6784a0819c7177d83555e6a1624cb4553e499
class MeshNormalNodeMaterial extends NodeMaterial {

	static get type() {

		return 'MeshNormalNodeMaterial';

	}

<<<<<<< HEAD
=======
	/**
	 * Constructs a new mesh normal node material.
	 *
	 * @param {Object} [parameters] - The configuration parameter.
	 */
>>>>>>> 50c6784a0819c7177d83555e6a1624cb4553e499
	constructor( parameters ) {

		super();

<<<<<<< HEAD
		this.lights = false;

=======
		/**
		 * This flag can be used for type testing.
		 *
		 * @type {boolean}
		 * @readonly
		 * @default true
		 */
>>>>>>> 50c6784a0819c7177d83555e6a1624cb4553e499
		this.isMeshNormalNodeMaterial = true;

		this.setDefaultValues( _defaultValues );

		this.setValues( parameters );

	}

<<<<<<< HEAD
=======
	/**
	 * Overwrites the default implementation by computing the diffuse color
	 * based on the normal data.
	 */
>>>>>>> 50c6784a0819c7177d83555e6a1624cb4553e499
	setupDiffuseColor() {

		const opacityNode = this.opacityNode ? float( this.opacityNode ) : materialOpacity;

<<<<<<< HEAD
		diffuseColor.assign( vec4( directionToColor( transformedNormalView ), opacityNode ) );
=======
		// By convention, a normal packed to RGB is in sRGB color space. Convert it to working color space.

		diffuseColor.assign( colorSpaceToWorking( vec4( directionToColor( normalView ), opacityNode ), SRGBColorSpace ) );
>>>>>>> 50c6784a0819c7177d83555e6a1624cb4553e499

	}

}

export default MeshNormalNodeMaterial;
