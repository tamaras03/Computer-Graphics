<<<<<<< HEAD
export default class ChainMap {

	constructor() {

=======
/**
 * Data structure for the renderer. It allows defining values
 * with chained, hierarchical keys. Keys are meant to be
 * objects since the module internally works with Weak Maps
 * for performance reasons.
 *
 * @private
 */
class ChainMap {

	/**
	 * Constructs a new Chain Map.
	 */
	constructor() {

		/**
		 * The root Weak Map.
		 *
		 * @type {WeakMap<Object, WeakMap>}
		 */
>>>>>>> 50c6784a0819c7177d83555e6a1624cb4553e499
		this.weakMap = new WeakMap();

	}

<<<<<<< HEAD
=======
	/**
	 * Returns the value for the given array of keys.
	 *
	 * @param {Array<Object>} keys - List of keys.
	 * @return {any} The value. Returns `undefined` if no value was found.
	 */
>>>>>>> 50c6784a0819c7177d83555e6a1624cb4553e499
	get( keys ) {

		let map = this.weakMap;

<<<<<<< HEAD
		for ( let i = 0; i < keys.length; i ++ ) {
=======
		for ( let i = 0; i < keys.length - 1; i ++ ) {
>>>>>>> 50c6784a0819c7177d83555e6a1624cb4553e499

			map = map.get( keys[ i ] );

			if ( map === undefined ) return undefined;

		}

		return map.get( keys[ keys.length - 1 ] );

	}

<<<<<<< HEAD
=======
	/**
	 * Sets the value for the given keys.
	 *
	 * @param {Array<Object>} keys - List of keys.
	 * @param {any} value - The value to set.
	 * @return {ChainMap} A reference to this Chain Map.
	 */
>>>>>>> 50c6784a0819c7177d83555e6a1624cb4553e499
	set( keys, value ) {

		let map = this.weakMap;

<<<<<<< HEAD
		for ( let i = 0; i < keys.length; i ++ ) {
=======
		for ( let i = 0; i < keys.length - 1; i ++ ) {
>>>>>>> 50c6784a0819c7177d83555e6a1624cb4553e499

			const key = keys[ i ];

			if ( map.has( key ) === false ) map.set( key, new WeakMap() );

			map = map.get( key );

		}

<<<<<<< HEAD
		return map.set( keys[ keys.length - 1 ], value );

	}

=======
		map.set( keys[ keys.length - 1 ], value );

		return this;

	}

	/**
	 * Deletes a value for the given keys.
	 *
	 * @param {Array<Object>} keys - The keys.
	 * @return {boolean} Returns `true` if the value has been removed successfully and `false` if the value has not be found.
	 */
>>>>>>> 50c6784a0819c7177d83555e6a1624cb4553e499
	delete( keys ) {

		let map = this.weakMap;

<<<<<<< HEAD
		for ( let i = 0; i < keys.length; i ++ ) {
=======
		for ( let i = 0; i < keys.length - 1; i ++ ) {
>>>>>>> 50c6784a0819c7177d83555e6a1624cb4553e499

			map = map.get( keys[ i ] );

			if ( map === undefined ) return false;

		}

		return map.delete( keys[ keys.length - 1 ] );

	}

}
<<<<<<< HEAD
=======

export default ChainMap;
>>>>>>> 50c6784a0819c7177d83555e6a1624cb4553e499
